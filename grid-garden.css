*{
    display: grid;
    grid-template-columns: 20% 20% 20% 20% 20%;
    grid-template-rows: 20% 20% 20% 20% 20%;
    /* grid-column-start indica qual coluna irá começar */
    grid-column-start: 3;
    grid-column-start: 5;
    /* When grid-column-start is used alone, the grid item by default will span exactly one column.
    However, you can extend the item across multiple columns by adding the grid-column-end property. */
    grid-column-end: 4;     /* irá preencher as colunas 1,2,3 */
    /* o começo pode ser um valor maior que o final */
    grid-column-start: 5;   /* irá começar na coluna 5 */
    grid-column-end: 2;     /* se estenderá até a coluna 2 */
    /* If you want to count grid lines from the right instead of the left, you can give grid-column-start
    and grid-column-end negative values. For example, you can set it to -1 to specify the first grid line from the right. */
    grid-column-start: 1;
    grid-column-end: -2;
    /* Instead of defining a grid item based on the start and end positions of the grid lines, you can 
    define it based on your desired column width using the span keyword. Keep in mind that span only works with positive values. */
    grid-column-start: 2;
    grid-column-end: span 2;
    /* You can also use the span keyword with grid-column-start to set your item's width relative to the end position. */
    grid-column-start: span 3;
    grid-column-end: 6;
    /* Typing both grid-column-start and grid-column-end every time can get tiring. Fortunately, grid-column is a 
    shorthand property that can accept both values at once, separated by a slash. */
    grid-column: 2 / 4;     /* will set the grid item to start on the 2nd vertical grid line and end on the 4th grid line. */
    /* One of the things that sets CSS grids apart from flexbox is that you can easily position items in two dimensions: columns and rows. 
    grid-row-start works much like grid-column-start except along the vertical axis. */
    grid-row-start: 3;  /* irá começar na terceira linha */
    grid-row: 3 / span 3;    /* irá começar na terceira linha e irá expandir 3 casas contando a atual até a casa 5; */
    /* If typing out both grid-column and grid-row is too much for you, there's yet another shorthand for that.
    grid-area accepts four values separated by slashes: grid-row-start, grid-column-start, grid-row-end, followed by grid-column-end. */
    grid-area: 1 / 1 / 3 / 6;  /* grid-row-start / grid-column-start / grid-row-end / grid-column-end */
    grid-area: 1 / 2 / 4 / -1;
    /* If grid items aren't explicitly placed with grid-area, grid-column, grid-row, etc., they are automatically placed according 
    to their order in the source code. We can override this using the order property, which is one of the advantages of grid over 
    table-based layout. 
    By default, all grid items have an order of 0, but this can be set to any positive or negative value, similar to z-index.*/
    order: 1;
    order: -1;
    /* Specifying a bunch of columns with identical widths can get tedious. Luckily there's a repeat function to help with that.
    or example, we previously defined five 20% columns with the rule grid-template-columns: 20% 20% 20% 20% 20%;. This can be 
    simplified as grid-template-columns: repeat(5, 20%); */
    grid-template-columns: repeat(8, 12.5%);    /* irá criar 8 colunas com 12.5% do width total */
    /* grid-template-columns doesn't just accept values in percentages, but also length units like pixels and ems. 
    You can even mix different units together. */
    grid-template-columns: 100px 3em 40%;   /* irá criar uma coluna de 100px, outra de 3em e outra de 40% width */
    /* Grid also introduces a new unit, the fractional fr. Each fr unit allocates one share of the available space. 
    For example, if two elements are set to 1fr and 3fr respectively, the space is divided into 4 equal shares; 
    the first element occupies 1/4 and the second element 3/4 of any leftover space. */
    grid-template-columns: 1fr 5fr;
    /* When columns are set with pixels, percentages, or ems, any other columns set with fr will divvy up the space that's left over.
    Here the carrots form a 50 pixel column on the left, and the weeds a 50 pixel column on the right. With grid-template-columns, 
    create these two columns, and use fr to make three more columns that take up the remaining space in between. */
    grid-template-columns: 50px repeat(3,1fr) 50px;
    /* grid-template is a shorthand property that combines grid-template-rows and grid-template-columns. 
    For example, grid-template: 50% 50% / 200px; will create a grid with two rows that are 50% each, 
    and one column that is 200 pixels wide.*/
    grid-template: 60% / 200px;
    grid-template: 1fr 50px / 20% 1fr;
}